configurations {
    jmhOnly
}

dependencies {
    implementation(rootProject)
    implementation('org.junit.jupiter:junit-jupiter-engine:5.8.+')
    implementation('org.apache.logging.log4j:log4j-core:2.17.1')
    implementation('org.apache.logging.log4j:log4j-api:2.17.1')
    implementation("org.ow2.asm:asm:${project.asm_version}")
    implementation("org.ow2.asm:asm-tree:${project.asm_version}")
    implementation("org.ow2.asm:asm-commons:${project.asm_version}")
    implementation('org.openjdk.jmh:jmh-core:1.35')
    jmhOnly('org.openjdk.jmh:jmh-core:1.35')
    jmhOnly('org.openjdk.jmh:jmh-generator-annprocess:1.35')
    jmhOnly(sourceSets.main.output)
    compileOnly('org.jetbrains:annotations:23.0.0')
    runtimeOnly('org.apiguardian:apiguardian-api:1.1.2')
    annotationProcessor('org.openjdk.jmh:jmh-generator-annprocess:1.35')
}

task jmh(type: JavaExec, dependsOn: sourceSets.main.output) {
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(project.java_version)
    }
    jvmArgs= [
        '-p', sourceSets.main.runtimeClasspath.asPath,
        '--add-modules', 'ALL-MODULE-PATH',
        '--add-opens', 'java.base/java.lang.invoke=cpw.mods.securejarhandler',
        '--add-exports', 'cpw.mods.securejarhandler/cpw.mods.niofs.union=ALL-UNNAMED'
    ]
    classpath = files(configurations.jmhOnly.asPath)
    mainClass = 'org.openjdk.jmh.Main'
    args    '-bm', 'avgt'  // benchmark mode
    args    '-r', '5s' // iteration time
    args    '-w', '5s' // warmup time
    args    '-wi', '2' // warmup iterations
    args    '-prof', 'stack'
    args    '-prof', 'jfr' // profilers
    args    '-tu', 'ns' // time unit
    args    '-i', '2' // iterations
    args    '-f', '1' // forks
    args    '-rff', project.file("${rootProject.buildDir}/jmh_results.txt")  // results file
    args    'cpw.mods.niofs.union.benchmarks.UnionFileSystemBenchmark'
}

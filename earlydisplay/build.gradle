import org.gradle.internal.os.OperatingSystem

switch (OperatingSystem.current()) {
	case OperatingSystem.LINUX:
		project.ext.lwjglNatives = "natives-linux"
		break
	case OperatingSystem.MAC_OS:
		project.ext.lwjglNatives = "natives-macos"
		break
	case OperatingSystem.WINDOWS:
		project.ext.lwjglNatives = "natives-windows"
		break
}

dependencies {

    implementation(project(':loader'))

    compileOnly("org.jetbrains:annotations:${jetbrains_annotations_version}")
    implementation(platform("org.lwjgl:lwjgl-bom:${lwjgl_version}"))
    implementation("org.lwjgl:lwjgl")
    implementation("org.lwjgl:lwjgl-glfw")
    implementation("org.lwjgl:lwjgl-opengl")
    implementation("org.lwjgl:lwjgl-stb")
    implementation("org.lwjgl:lwjgl-tinyfd")
    implementation("org.slf4j:slf4j-api:${slf4j_api_version}")
    implementation("net.sf.jopt-simple:jopt-simple:${jopt_simple_version}")

    testImplementation(platform("org.junit:junit-bom:$jupiter_version"))
    testRuntimeOnly('org.junit.platform:junit-platform-launcher')
    testImplementation('org.junit.jupiter:junit-jupiter')
    testImplementation('org.junit.jupiter:junit-jupiter-params')
    testImplementation("org.mockito:mockito-junit-jupiter:$mockito_version")
    testImplementation("org.assertj:assertj-core:${assertj_version}")
    testRuntimeOnly("org.lwjgl:lwjgl") {
        artifact {
            classifier = lwjglNatives
        }
    }
    testRuntimeOnly("org.lwjgl:lwjgl-glfw") {
        artifact {
            classifier = lwjglNatives
        }
    }
    testRuntimeOnly("org.lwjgl:lwjgl-opengl") {
        artifact {
            classifier = lwjglNatives
        }
    }
    testRuntimeOnly("org.lwjgl:lwjgl-stb") {
        artifact {
            classifier = lwjglNatives
        }
    }
}
